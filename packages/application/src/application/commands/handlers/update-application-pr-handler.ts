import { ICommandHandler } from "@filecoin-plus/core";
import { inject, injectable } from "inversify";
import { TYPES } from "@src/types";
import { IGithubClient, PullRequest } from "@src/infrastructure/clients/github";
import {
  DatacapAllocator,
  DatacapAllocatorPhase,
  DatacapAllocatorPhaseStatus,
  DatacapAllocatorStatus,
  IDatacapAllocatorRepository,
} from "@src/domain/datacap-allocator";
import { UpdateApplicationPullRequestCommand } from "../definitions/update-application-pr";

@injectable()
export class UpdateApplicationPullRequestCommandHandler
  implements ICommandHandler<UpdateApplicationPullRequestCommand>
{
  commandToHandle: string = UpdateApplicationPullRequestCommand.name;

  constructor(
    @inject(TYPES.DatacapAllocatorRepository)
    private readonly _repository: IDatacapAllocatorRepository,
    @inject(TYPES.GithubClient) private readonly _githubClient: IGithubClient
  ) {}

  async handle(command: UpdateApplicationPullRequestCommand): Promise<void> {
    // Get the allocator from the repository
    const allocator = await this._repository.getById(command.allocatorId);
    if (!allocator) {
      throw new Error(`Allocator with ID ${command.allocatorId} not found`);
    }

    if (!allocator.applicationPullRequest) {
      // Create a pull request for the allocator
      const pullRequest = await this.createPullRequest(allocator);

      // Update the allocator with the pull request information
      allocator.createApplicationPullRequest(
        pullRequest.number,
        pullRequest.html_url
      );
      this._repository.save(allocator, allocator.version);
    } else {
      await this.updatePullRequestMessage(allocator);
    }
  }

  private async createPullRequest(
    allocator: DatacapAllocator
  ): Promise<PullRequest> {
    // Create a new branch for the allocator
    const branchName = `filecoin-plus-bot/allocator/${allocator.guid}`;
    await this._githubClient.createBranch(
      "asynctomatic",
      "Allocator-Registry",
      branchName,
      "main"
    );

    // Create a pull request for the new allocator
    const pullRequest = await this._githubClient.createPullRequest(
      "asynctomatic",
      "Allocator-Registry",
      `Add new allocator: ${allocator.firstname} ${allocator.lastname}`,
      this.generateCommentMessage(allocator),
      branchName,
      "main",
      [
        {
          path: `allocators/${allocator.guid}.json`,
          content: JSON.stringify(
            {
              firstName: allocator.firstname,
              lastName: allocator.lastname,
              email: allocator.email,
              githubId: allocator.githubId,
              currentPosition: allocator.currentPosition,
              status: allocator.kycStatus,
            },
            null,
            2
          ),
        },
      ]
    );
    return pullRequest;
  }

  private async updatePullRequestMessage(allocator: DatacapAllocator) {
    // Update the message on the existing pull request
    await this._githubClient.updatePullRequest(
      "asynctomatic",
      "Allocator-Registry",
      allocator.applicationPullRequest.prNumber,
      `Add new allocator: ${allocator.firstname} ${allocator.lastname}`,
      this.generateCommentMessage(allocator)
    );
  }

  private generateCommentMessage(allocator: DatacapAllocator): string {
    const statusEmoji = {
      [DatacapAllocatorPhaseStatus.NOT_STARTED]: "‚ö™",
      [DatacapAllocatorPhaseStatus.IN_PROGRESS]: "üü°",
      [DatacapAllocatorPhaseStatus.COMPLETED]: "üü¢",
      [DatacapAllocatorPhaseStatus.FAILED]: "üî¥",
    };

    let message = `
# Filecoin Plus Allocator Application Status

## Application Details
| Field | Value |
|-------|-------|
| Applicant | ${allocator.guid} |
| Submission Date | ${new Date().toISOString().split("T")[0]} |

## Current Status
${statusEmoji[allocator.status.phaseStatus] || "‚ùì"} \`${
      allocator.status.phase
    }\`

`;

    message += this.getStatusSpecificMessage(allocator.status);

    message += `
---
<sup>This message was automatically generated by the Filecoin Plus Bot. For more information, visit [filecoin.io](https://filecoin.io)</sup>
`;

    return message;
  }

  private getKYCStatusMessage(
    phaseStatus: DatacapAllocatorPhaseStatus
  ): string {
    switch (phaseStatus) {
      case DatacapAllocatorPhaseStatus.NOT_STARTED:
        return `
### Next Steps
1. Complete the KYC process at [our secure portal](https://kyc.filecoinplus.io)
2. Your application will be automatically updated once submitted

> ‚ÑπÔ∏è KYC completion is required to proceed with your application
`;

      case DatacapAllocatorPhaseStatus.IN_PROGRESS:
        return `
### Current Status
- Your KYC submission is under review
- We'll update this thread once the process is complete

> ‚è≥ Thank you for your patience during this process
`;

      case DatacapAllocatorPhaseStatus.COMPLETED:
        return `
### KYC Completed
- Your KYC has been successfully completed
- Your application is now moving to the discussion phase

> ‚úÖ Thank you for your cooperation in this process
`;

      case DatacapAllocatorPhaseStatus.FAILED:
        return `
### KYC Rejected
- We regret to inform you that your KYC submission has been rejected

> ‚ùå Please contact our support team for more information
`;
    }
  }

  private getDiscussionStatusMessage(
    phaseStatus: DatacapAllocatorPhaseStatus
  ): string {
    switch (phaseStatus) {
      case DatacapAllocatorPhaseStatus.NOT_STARTED:
        return "";

      case DatacapAllocatorPhaseStatus.IN_PROGRESS:
        return `
### Discussion Phase
- Your application is currently under review in our third-party interface
- We'll update this thread once the discussion phase is complete

> üí¨ This process may take some time. Thank you for your patience.
`;

      case DatacapAllocatorPhaseStatus.COMPLETED:
        return `
### Discussion Completed
- The review process for your application has been completed
- Your application is now moving to the approval phase

> üëç Your application has successfully passed the discussion phase
`;

      case DatacapAllocatorPhaseStatus.FAILED:
        return `
### Discussion Rejected
- We regret to inform you that your application has been rejected

> ‚ùå Please contact our support team for more information
`;
    }
  }

  private getRKHApprovalStatusMessage(
    status: DatacapAllocatorPhaseStatus
  ): string {
    switch (status) {
      case DatacapAllocatorPhaseStatus.NOT_STARTED:
        return "";
      case DatacapAllocatorPhaseStatus.IN_PROGRESS:
        return `
### Approval Pending
- Your application is awaiting final approval from on-chain signers
- We'll update this thread once a decision has been made

> ‚è≥ The final decision is pending. Thank you for your patience.
`;
      case DatacapAllocatorPhaseStatus.COMPLETED:
        return `
### Application Approved
- Congratulations! Your application to become a datacap allocator has been approved
- You will receive further instructions shortly

> üéâ Welcome to the Filecoin Plus community!
`;
      case DatacapAllocatorPhaseStatus.FAILED:
        return `
### Application Rejected
- We regret to inform you that your application has been rejected

> ‚ùå Please contact our support team for more information
`;
    }
  }

  private getStatusSpecificMessage(status: DatacapAllocatorStatus): string {
    switch (status.phase) {
      case DatacapAllocatorPhase.KYC:
        return this.getKYCStatusMessage(status.phaseStatus);
      case DatacapAllocatorPhase.GOVERNANCE_REVIEW:
        return this.getDiscussionStatusMessage(status.phaseStatus);
      case DatacapAllocatorPhase.RKH_APPROVAL:
        return this.getRKHApprovalStatusMessage(status.phaseStatus);
      default:
        return `
### Need Assistance?
- For questions about the application process, please contact our support team

> üìû We're here to help if you need any assistance
`;
    }
  }
}
